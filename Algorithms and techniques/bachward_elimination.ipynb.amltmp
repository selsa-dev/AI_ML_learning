{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Sample data creation\n",
        "# Let's assume we have a dataset with 5 features and a target variable\n",
        "np.random.seed(42)\n",
        "X = pd.DataFrame({\n",
        "    'Feature1': np.random.rand(100),\n",
        "    'Feature2': np.random.rand(100),\n",
        "    'Feature3': np.random.rand(100),\n",
        "    'Feature4': np.random.rand(100),\n",
        "    'Feature5': np.random.rand(100)\n",
        "})\n",
        "y = np.random.rand(100)\n",
        "\n",
        "# Add a constant (intercept) to the model\n",
        "X = sm.add_constant(X)\n",
        "\n",
        "# Backward elimination function\n",
        "def backward_elimination(X, y, significance_level=0.05):\n",
        "    # Fit the model with all features\n",
        "    model = sm.OLS(y, X).fit()\n",
        "    \n",
        "    # Get the p-values of the features\n",
        "    p_values = model.pvalues\n",
        "    \n",
        "    # While there are features with p-values greater than the significance level\n",
        "    while p_values.max() > significance_level:\n",
        "        # Remove the feature with the highest p-value\n",
        "        feature_to_remove = p_values.idxmax()\n",
        "        X = X.drop(columns=feature_to_remove)\n",
        "        \n",
        "        # Refit the model\n",
        "        model = sm.OLS(y, X).fit()\n",
        "        \n",
        "        # Update p-values\n",
        "        p_values = model.pvalues\n",
        "    \n",
        "    return model\n",
        "\n",
        "# Apply backward elimination\n",
        "final_model = backward_elimination(X, y)\n",
        "\n",
        "# Display the summary of the final model\n",
        "print(final_model.summary())"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3.10 - SDK v2",
      "language": "python",
      "name": "python310-sdkv2"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.6"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}